{
  "_comment": "Article 005 - Exemple de formulaire de contact avec EmailJS",
  "id": "article-5",
  "title": "Exemple de formulaire de contact avec EmailJS",
  "tags": ["React", "EmailJS", "Formulaire"],
  "author": "Emeric Pataut",
  "date": "29 septembre 2025",
  "banner": "/images/picture_article-5.webp",
  "excerpt": "Retour d’expérience : intégration de EmailJS à un formulaire de contact dans un projet React",
  "image": "/images/picture_article-5.webp",
  "summary": ["Pourquoi EmailJS ?", "Mise en place de EmailJS dans un projet React", "Personnalisation & expérience utilisateur", "Limite du service", "Sécurité", "Conseils & retour d’expérience", "Conclusion" ],
  "content": {
    "pourquoi emailjs ?": "Lorsque j'ai commencé à travailler sur mon portfolio, je cherchais un moyen simple d’ajouter un formulaire de contact sans avoir à mettre en place de backend. \n Je voulais quelque chose de simple. \n C’est là que j’ai découvert EmailJS, une solution qui permet d’envoyer des e-mails directement depuis le frontend, sans serveur. Exactement ce qu’il me fallait. \n Après une première intégration réussie sur mon portfolio, j’ai également réutilisé EmailJS dans un projet client, où la simplicité et la rapidité de mise en place du service étaient tout aussi importantes.",
    "mise en place de emailjs dans un projet react": "L'intégration d’EmailJS dans un projet React est relativement simple, ce qui en fait une solution accessible. \n 1. Installation \n La première étape consiste à installer la bibliothèque EmailJS : npm install @emailjs/browser \n 2. Création d’un compte EmailJS \n Une fois la dépendance installée, il faut se rendre sur EmailJS et créer un compte. \n Depuis le dashboard, configurer : \n Un service (lié à une adresse e-mail — Gmail, Outlook, etc.), \n Un template d’e-mail (le contenu qui sera envoyé), \n Et récupérer les identifiants suivants : service ID, template ID et public key. \n 3. Intégration dans le code \n L’implémentation dans React se fait très facilement en appelant la méthode sendForm ou send, que l’on connecte à l’événement de soumission du formulaire. \n Pas de mauvaise surprise ici : dans mes différents projets, l'intégration s’est faite sans aucun problème.",
    "personnalisation & expérience utilisateur": "Une fois EmailJS connecté au formulaire, j’ai adapté le contenu du template aux champs du formulaire (nom, e-mail, message…) afin que chaque message reçu soit clair et facile à lire, que ce soit pour moi dans mon portfolio ou pour un client dans son propre projet. \n Le système de variables proposé par EmailJS permet de facilement lier les données du formulaire au contenu de l’e-mail. \n Côté interface utilisateur, j’ai également ajouté un message de confirmation qui s’affiche dès que l’e-mail est envoyé avec succès. \n C’est un petit détail, mais ça améliore beaucoup l’expérience utilisateur en apportant un retour immédiat.  ",
    "limite du service" : "L’un des avantages d’EmailJS, c’est qu’il propose un forfait gratuit assez généreux : jusqu’à 1000 e-mails par mois. Pour un portfolio personnel ou un site vitrine avec un formulaire de contact, c’est largement suffisant. \n Concrètement, cela représente le traitement d’environ 30 e-mails par jour, ce qui couvre bien les besoins de la majorité des petits projets ou des sites à trafic modéré. \n Ce quota m’a permis de déployer EmailJS sans me soucier de dépasser les limites dans le cadre d’un usage classique.",
    "sécurité": "Quand j’ai intégré EmailJS dans mon projet React, je me suis vite posé la question de l’exposition de la clé dans le code. \n La solution, c’est d’utiliser les variables d’environnement. \n Concrètement, j’ai créé un fichier .env.local pour travailler en local, et j’ai ajouté les mêmes clés dans l’interface de Vercel en tant que variables d’environnement, pour la mise en ligne. \n En plus, si je dois changer une clé un jour, je n’ai pas besoin de modifier mon code : il me suffit de mettre à jour la variable. \n C’est simple et la clé n’est plus accessible aux regards indiscrets.",
    "conseils & retour d’expérience" : "Mon retour global sur EmailJS est très positif. \n Si vous cherchez une solution simple, rapide et sans backend pour intégrer un formulaire de contact dans un projet React, c’est un excellent choix. \n Ce que j’ai apprécié : \n - Facilité d’intégration : quelques étapes suffisent pour tout connecter. \n - Pas de backend à gérer : tout se fait côté frontend, ce qui fait gagner beaucoup de temps. \n - Générosité du plan gratuit : 1000 mails/mois, c’est largement suffisant pour des projets personnels ou vitrines.",
    "conclusion": "EmailJS m’a permis de gagner du temps et de livrer des fonctionnalités efficaces, sans complexité technique inutile. \n Que ce soit pour un portfolio ou un projet client, c’est une solution que je recommande sans hésiter pour tous les cas où un formulaire de contact simple et rapide est suffisant."
}
}